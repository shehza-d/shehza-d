{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	//my own
	"console": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
			"console.log(${TM_SELECTED_TEXT:`${1:Shehzad}`})",
			"$2"
		],
		"description": "Log output to console"
	},
	"consoleLogObject": {
		"prefix": "log",
		"body": "console.log('${1:object} :>> ', ${1:object});",
		"description": "Displays an object in the console with its name"
	},
	"Arrow Function": {
		"scope": "javascript,typescript",
		"prefix": "fn",
		"body": [
			"const ${1:funciton_ka_nam} = (${2:arguments})  => {\n${3://Body}\n} ",
		],
		"description": "es6 arrow Function by Shehzad"
	},
	"preventDefault": { //   e.preventDefault();
		"scope": "javascript,typescript",
		"prefix": "e",
		"body": [
			"e.preventDefault();",
			"$1"
		],
		"description": "preventDefault"
	},
	"map": {
		"scope": "javascript,typescript",
		"prefix": "map",
		"body": [
			"let ${1:array_name} = ${2:array_name}.map((${3:item, index}) => {\n${4://Body};\n});",
			"$5"
		],
		"description": "method of array to map Loop"
	},
	// now create snippet for es6 class and object and loops and for and if
	// copied from github 
	"forEach": {
		"prefix": "fe",
		"body": "${1:array}.forEach((${2:currentItem}) => {\n\t${0}\n});",
		"description": "Creates a forEach statement in ES6 syntax"
	},
	"forOf": {
		"prefix": "fof",
		"body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
		"description": "Iterating over property names of iterable objects"
	},
	"forIn": {
		"prefix": "fin",
		"body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
		"description": "Iterating over property values of iterable objects"
	},
	// "destructingObject": {
	// 	"prefix": "dob",
	// 	"body": "const {${2:propertyName}} = ${1:objectToDestruct};",
	// 	"description": "Creates and assigns a local variable using object destructing"
	// },
	// "destructingArray": {
	// 	"prefix": "dar",
	// 	"body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
	// 	"description": "Creates and assigns a local variable using array destructing"
	// },
	// "setInterval": {
	// 	"prefix": "sti",
	// 	"body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
	// 	"description": "Executes the given function at specified intervals in ES6 syntax"
	// },
	
}